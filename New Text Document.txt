import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error 
# Load the dataset 
data_path = '/content/SeoulBikeData.csv' 
df = pd.read_csv(data_path, encoding='ISO-8859-1') 
# Display column names to check correctness 
print("Dataset Columns:", df.columns) 
# Selecting relevant features 
features = ['Temperature(Â°C)'] 
target = 'Rented Bike Count' 
 
# Ensure the correct columns exist in the dataset 
if features[0] not in df.columns or target not in df.columns: 
raise KeyError("Check the column names in the dataset and update 
'features' and 'target' accordingly.") 
 
X = df[features] 
y = df[target] 
 
# Split into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, 
random_state=42) 
 
# Train Simple Linear Regression Model 
model = LinearRegression() 
model.fit(X_train, y_train) 
y_pred = model.predict(X_test) 
rmse = np.sqrt(mean_squared_error(y_test, y_pred)) 
 
# Print results 
print(f'Linear Regression RMSE: {rmse:.2f}') 
 
# Plot predictions 
plt.figure(figsize=(10, 5)) 
plt.scatter(X_test, y_test, color='blue', label='Actual') 
plt.plot(X_test, y_pred, color='red', label='Regression Line') 
plt.xlabel('Temperature (C)') 
plt.ylabel('Rented Bike Count') 
plt.legend() 
plt.title('Simple Linear Regression Model') 
plt.show() 